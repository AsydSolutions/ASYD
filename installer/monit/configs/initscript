<%if <%SVC_MANAGER%> == update-rc.d %>
#!/bin/sh

### BEGIN INIT INFO
# Provides:          monit
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      $all
# Should-Stop:       $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: service and resource monitoring daemon
# Description:       monit is a utility for managing and monitoring
#                    processes, programs, files, directories and filesystems
#                    on a Unix system. Monit conducts automatic maintenance
#                    and repair and can execute meaningful causal actions
#                    in error situations.
### END INIT INFO

set -e

. /lib/lsb/init-functions

DAEMON=/usr/bin/monit
CONFIG="/etc/monit/monitrc"
NAME=monit
DESC="daemon monitor"
MONIT_OPTS=
PID="/var/.$NAME.pid"

# Check if DAEMON binary exist
[ -f $DAEMON ] || exit 0

MONIT_OPTS="-c $CONFIG $MONIT_OPTS"

monit_check_config () {
  # Check for emtpy config.
  if [ "`grep -s -v \"^#\" $CONFIG`" = "" ]
  then
    echo "empty config, please edit $CONFIG."
    exit 0
  fi
}

monit_check_perms () {
  # Check the permission on configfile.
  # The permission must not have more than -rwx------ (0700) permissions.

  # Skip checking, fix perms instead.
  /bin/chmod go-rwx $CONFIG
}

monit_checks () {
  # Check for emtpy configfile
  monit_check_config
  # Check permissions of configfile
  monit_check_perms
}

case "$1" in
  start)
    /bin/echo -n "Starting $DESC: $NAME"
    monit_checks $1
    if start-stop-daemon --start --quiet --oknodo \
                         --pidfile $PID --exec $DAEMON \
                         -- $MONIT_OPTS
    then
      log_end_msg 0
    else
      log_end_msg 1
    fi
    ;;
  stop)
    /bin/echo -n "Stopping $DESC: $NAME"
    if start-stop-daemon --retry TERM/5/KILL/5 --oknodo --stop --quiet \
                         --pidfile $PID
    then
      log_end_msg 0
    else
      log_end_msg 1
    fi
    ;;
  reload)
    /bin/echo -n "Reloading $DESC configuration: $NAME"
    if start-stop-daemon --stop --signal HUP --quiet \
                                --oknodo --pidfile $PID \
                                --exec $DAEMON -- $MONIT_OPTS
    then
      log_end_msg 0
    else
      log_end_msg 1
  fi
    ;;
  restart|force-reload)
    $0 stop
    $0 start
    ;;
  syntax)
    $DAEMON $MONIT_OPTS -t
    ;;
  status)
    status_of_proc -p $PID $DAEMON $NAME
    ;;
  *)
    log_action_msg "Usage: /etc/init.d/$NAME {start|stop|reload|restart|force-reload|syntax|status}"
    ;;
esac

exit 0
<%endif%>
<%if <%SVC_MANAGER%> == systemctl %>
[Unit]
Description=Pro-active monitoring utility for unix systems
After=network.target

[Service]
Type=simple
ExecStart=/usr/bin/monit -Ic /etc/monit/monitrc
ExecStop=/usr/bin/monit quit
ExecReload=/usr/bin/monit reload

[Install]
WantedBy=multi-user.target
<%endif%>
<%if <%SVC_MANAGER%> == rc.d %>
#!/bin/sh
#
# $OpenBSD: monit.rc,v 1.2 2012/11/25 13:34:04 ajacoutot Exp $

daemon="/usr/bin/monit"
daemon_flags="-c /etc/monit/monitrc"

. /etc/rc.d/rc.subr

rc_cmd $1
<%endif%>
<%if <%SVC_MANAGER%> == chkconfig %>
# monit - this is a startscript for monit
#
# chkconfig: 2345 89 15
# description: Utility for monitoring services on a Unix system
#
# processname:  monit.
# config:       .monit.conf
# pidfile:      .monit.pid
# Short-Description: Monit is a system monitor

#Source function library
. /etc/init.d/functions

prog="monit"
option="-c /etc/monit/monitrc"
pidfile="/var/.monit.pid"
lockfile=""


RETVAL=0

start() {
        echo -n $"Starting $prog-$user: "
        daemon $prog $option
        RETVAL=$?
        echo
        return $RETVAL
}

stop() {
        echo -n $"Shutting down $prog-$user: "
        killproc -p $pidfile #$prog
        RETVAL=$?
        echo
        return $RETVAL
}

restart() {
        stop
        start
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        restart
        ;;
  status)
        status -p $pidfile $prog-$user
        RETVAL=$?
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|status}"
        RETVAL=1
esac

exit $RETVAL
<%endif%>
<%if <%SVC_MANAGER%> == runit %>
#!/bin/sh
if [ ! -f "/var/.monit.pid" ]; then
    /usr/bin/monit -c /etc/monit/monitrc
fi
<%endif%>
<%if <%SVC_MANAGER%> == service %>
#!/bin/sh
#
# $FreeBSD: head/sysutils/monit/files/monit.in 340872 2014-01-24 00:14:07Z mat $
#

# PROVIDE: monit
# REQUIRE: NETWORKING SERVERS
# BEFORE: DAEMON
# KEYWORD: shutdown

#
# Add the following lines to /etc/rc.conf to enable monit:
# monit_enable (bool):        Set to "NO" by default.
#                             Set it to "YES" to enable monit
# monit_flags (str):          Flags passed to monit on startup.
#                             Default is "".
#
. /etc/rc.subr

name=monit
rcvar=monit_enable
load_rc_config ${name}

: ${monit_enable:=NO}

extra_commands=reload
restart_precmd=monit_checkconfig
reload_precmd=monit_checkconfig

default_config=/usr/local/etc/monitrc
required_files=${default_config}
command="/usr/local/bin/monit"
command_args="-c ${default_config}"
pidfile=/var/.monit.pid
stop_cmd=" kill -15 $(cat /var/.monit.pid)"

monit_checkconfig()
{
        echo "Performing sanity check on monit configuration:"
        ${command} ${command_args} -t
}

run_rc_command "$1"
<%endif%>
<%if <%SVC_MANAGER%> == launchd %>
<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
"http://www.apple.com/DTDs/PropertyList-1.0.dtd" >
<plist version='1.0'>
<dict>
<key>Label</key><string>org.asyd.monit</string>
<key>ProgramArguments</key>
<array>
        <string>/opt/local/bin/daemondo</string>
        <string>--label=monit</string>
        <string>--start-cmd</string>
        <string>/usr/local/bin/monit</string>
        <string>-I</string>
        <string>-c</string>
        <string>/usr/local/etc/monitrc</string>
        <string>;</string>
        <string>--pid=exec</string>
</array>
<key>Debug</key><false/>
<key>Disabled</key><true/>
<key>KeepAlive</key><true/>
</dict>
</plist>
<%endif%>

# Version: 1.0.0
